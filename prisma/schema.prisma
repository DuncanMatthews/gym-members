generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Basic user roles
enum UserRole {
  ADMIN
  STAFF
  MEMBER
}

enum MembershipDuration {
  MONTHLY
  THREE_MONTH
  SIX_MONTH
  ANNUAL
}

enum MembershipStatus {
  ACTIVE // Membership is active, user has gym access
  PAUSED // Temporarily paused (e.g., vacation hold)
  CANCELLED // Cancelled but not yet expired
  EXPIRED // Past end date, no longer valid
  PENDING // Payment/registration pending
  FROZEN // Admin-frozen (e.g., payment issues)
}

// Simple user model
model User {
  id       String    @id @default(cuid())
  email    String    @unique
  name     String
  password String
  role     UserRole  @default(MEMBER)
  phone    String?
  payments Payment[]
  invoices Invoice[]
  gender String?
  // New fields for identification
  idNumber     String?   @unique // National ID, Passport, Driver's License, etc.
  dateOfBirth  DateTime?
  // Address fields
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?

  // Member-specific fields
  membershipId    String?
  membership      Membership? @relation(fields: [membershipId], references: [id])
  membershipStart DateTime?
  membershipEnd   DateTime?
  isActive        Boolean     @default(false)

  // Organization relationship for SaaS multi-tenancy

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?
}

model Membership {
  id               String         @id @default(cuid())
  membershipPlanId String
  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id])
  pricingTierId    String
  pricingTier      PricingTier    @relation(fields: [pricingTierId], references: [id])

  // Billing information
  billingStartDate DateTime
  nextBillingDate  DateTime
  endDate          DateTime // When the commitment period ends
  autoRenew        Boolean  @default(false)

  // Payment tracking
  paidMonths     Int    @default(0) // Tracks how many months have been paid in the commitment
  proratedAmount Float? // For month-to-month calculations

  // Status
  status MembershipStatus @default(ACTIVE)

  // User relationship
  users User[]

  // Custom values
  customFields Json?

  // Timestamps
  startDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments Payment[]
  invoices Invoice[]
}

model MembershipPlan {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  features     String[] // Features included in this tier
  attributes   Json? // Flexible storage for custom fields
  pricingTiers PricingTier[] // All available pricing options for this plan
  memberships  Membership[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PricingTier {
  id               String             @id @default(cuid())
  membershipPlanId String // Remove @unique here
  membershipPlan   MembershipPlan     @relation(fields: [membershipPlanId], references: [id])
  duration         MembershipDuration
  price            Float
  totalPrice       Float
  discountPercent  Float?
  memberships      Membership[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([membershipPlanId, duration]) // Keep this compound constraint
}

// Add these models to your schema

model Payment {
  id           String     @id @default(cuid())
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])

  // Payment details
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String? // e.g., "credit_card", "cash", "bank_transfer"
  paymentMethodId String? // Reference to a stored payment method if applicable
  transactionId   String? // External payment processor transaction ID

  // Invoice reference
  invoiceId String?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  // Period covered
  periodStart DateTime
  periodEnd   DateTime

  // Payment dates
  dueDate  DateTime
  paidDate DateTime?

  // Additional data
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

model Invoice {
  id           String     @id @default(cuid())
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])

  // Invoice details
  invoiceNumber String @unique
  subtotal      Float
  tax           Float  @default(0)
  discount      Float  @default(0)
  total         Float

  // Status tracking
  status InvoiceStatus @default(DRAFT)

  // Dates
  issueDate DateTime
  dueDate   DateTime
  paidDate  DateTime?

  // Related payments
  payments Payment[]

  // Additional data
  notes     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}
