generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Basic user roles
enum UserRole {
  ADMIN
  STAFF
  MEMBER
}

enum MembershipDuration {
  MONTHLY
  THREE_MONTH
  SIX_MONTH
  ANNUAL
}

enum MembershipStatus {
  ACTIVE       // Membership is active, user has gym access
  PAUSED       // Temporarily paused (e.g., vacation hold)
  CANCELLED    // Cancelled but not yet expired
  EXPIRED      // Past end date, no longer valid
  PENDING      // Payment/registration pending
  FROZEN       // Admin-frozen (e.g., payment issues)
}


// Simple user model
model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(MEMBER)
  phone    String?

    // New fields for identification
  idNumber String?   @unique // National ID, Passport, Driver's License, etc.
  
  // Address fields
  addressLine1 String?
  addressLine2 String?
  city        String?
  state       String?
  postalCode  String?
  country     String?

  // Member-specific fields
  membershipId    String?
  membership      Membership? @relation(fields: [membershipId], references: [id])
  membershipStart DateTime?
  membershipEnd   DateTime?
  isActive        Boolean     @default(false)

  // Organization relationship for SaaS multi-tenancy

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?
}

model Membership {
  id String @id @default(cuid())

  // Membership plan relationship
  membershipPlanId String
  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id])
  duration MembershipDuration?

  // Custom values for this specific membership
  customFields Json? // Store custom fields and values

  billingStartDate DateTime
  nextBillingDate  DateTime
  autoRenew        Boolean  @default(true)
  // User relationship
  users            User[]

  status           MembershipStatus @default(ACTIVE)

  // Timestamps
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model MembershipPlan {
  id           String   @id @default(cuid())
  name         String // e.g., "Basic", "Standard", "Premium"
  description  String?
  price        Float // Instead of Decimal
  billingCycle String // "monthly", "quarterly", "annually"
  features     String[] // Array of included features
  isActive     Boolean  @default(true)

  // Custom attributes defined by the gym
  attributes Json? // Flexible storage for custom fields

  // Organization relationship

  // Relationship to memberships
  memberships Membership[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
